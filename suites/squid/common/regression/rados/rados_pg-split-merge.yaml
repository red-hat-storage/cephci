# Suite contains tests related pg split and merge scenario
# Conf: conf/squid/common/13node-4client-single-site-regression.yaml
# Deployment: suites/squid/common/regression/single-site-deploy-and-configure.yaml


tests:

  - test:
      name: Enable logging to file
      module: rados_prep.py
      config:
        log_to_file: true
      desc: Change config options to enable logging to file

  - test:
      name: Test Reads Balancer
      module: test_reads_balancer.py
      desc: Testing reads balancer online tool functionality in RHCS
      polarion-id: CEPH-83576078
      config:
        negative_scenarios: true
        online_command_verification: true
        create_pools:
          - create_pool:
              pool_name: rpool_1
              pg_num: 64
              byte_size: 256
              pool_type: replicated
              max_objs: 500
              rados_read_duration: 30
          - create_pool:
              pool_name: rpool_2
              pg_num: 128
              pool_type: replicated
              max_objs: 500
              rados_read_duration: 30
              byte_size: 256
          - create_pool:
              pool_name: rpool_3
              pg_num: 32
              max_objs: 500
              rados_read_duration: 30
              byte_size: 256
              pool_type: replicated
          - create_pool:
              create: true
              pool_name: ecpool_test_1
              pool_type: erasure
              pg_num: 32
              k: 2
              m: 2
              max_objs: 500
              rados_read_duration: 30
              byte_size: 256
        delete_pools:
          - rpool_1
          - rpool_2
          - rpool_3
          - ecpool_test_1

  - test:
      name: Test Reads Balancer
      module: test_reads_balancer.py
      desc: Testing reads balancer offline tool functionality in RHCS
      polarion-id: CEPH-83576079
      config:
        offline_command_verification: true
        create_pools:
          - create_pool:
              pool_name: rpool_1
              pg_num: 64
              byte_size: 256
              pool_type: replicated
              max_objs: 500
              rados_read_duration: 30
          - create_pool:
              pool_name: rpool_2
              pg_num: 128
              pool_type: replicated
              max_objs: 500
              rados_read_duration: 30
              byte_size: 256
          - create_pool:
              pool_name: rpool_3
              pg_num: 32
              max_objs: 500
              rados_read_duration: 30
              byte_size: 256
              pool_type: replicated
          - create_pool:
              create: true
              pool_name: ecpool_test_2
              pool_type: erasure
              pg_num: 32
              k: 2
              m: 2
              max_objs: 500
              rados_read_duration: 30
              byte_size: 256
        delete_pools:
          - rpool_1
          - rpool_2
          - rpool_3
          - ecpool_test_2

# The below test is openstack only, and would need modifications to run on BM.
# commenting the run of below test in BM pipeline
  - test:
      name: verify mon parameter 'mon_pg_warn_max_object_skew'
      polarion-id: CEPH-83575440
      module: test_mon_pg_warn.py
      desc: verify auto-increment of 'mon_pg_warn_max_object_skew' MON parameter

  - test:
      name: Verify PG split and merge
      module: test_pg_split.py
      desc: Verify PG splitting and merging
      polarion-id: CEPH-11674
      config:
        create_pools:
          - create_pool:
              pool_name: pool1
              pg_num: 32
              rados_put: true
              num_objs: 200
              byte_size: 1024
              pool_type: replicated
        delete_pools:
          - pool1

  - test:
      name: Verify restart osd during PG split
      module: test_pg_split.py
      desc: Verify restart osd when PG split in progress
      polarion-id: CEPH-11667
      config:
        create_pools:
          - create_pool:
              restart_osd: true
              pool_name: pool2
              pg_num: 32
              rados_put: true
              num_objs: 200
              byte_size: 1024
              pool_type: replicated
        delete_pools:
          - pool2

  - test:
      name: Verify PG split and merge with network delay
      module: test_pg_split.py
      desc: Verify PG splitting and merging with network delay
      polarion-id: CEPH-83571705
      config:
        create_pools:
          - create_pool:
              pool_name: pool5
              pg_num: 32
              rados_put: true
              num_objs: 200
              byte_size: 1024
              pool_type: replicated
        add_network_delay: true
        delete_pools:
          - pool5

  - test:
      name: Verify delete object during PG split
      module: test_pg_split.py
      desc: Verify delete object when PG split in progress
      polarion-id: CEPH-11671
      config:
        create_pools:
          - create_pool:
              del_obj: true
              pool_name: pool3
              pg_num: 32
              rados_put: true
              num_objs: 200
              objs_to_del: 20
              byte_size: 1024
              pool_type: replicated
        delete_pools:
          - pool3

  - test:
      name: Verify add remove osd during PG split
      module: test_pg_split.py
      desc: Verify osd removal and addition when PG split in progress
      polarion-id: CEPH-11677
      config:
        create_pools:
          - create_pool:
              remove_add_osd: true
              pool_name: pool4
              pg_num: 32
              rados_put: true
              num_objs: 200
              byte_size: 1024
              pool_type: replicated
        delete_pools:
          - pool4

  - test:
      name: Verify premerge PGS during PG split
      module: test_pg_split.py
      desc: Verify if there are premerge PGs when split is in progress
      polarion-id: CEPH-83573526
      config:
        create_pools:
          - create_pool:
              check_premerge_pgs: true
              pool_name: pool3
              pg_num: 32
              rados_put: true
              num_objs: 200
              byte_size: 1024
              pool_type: replicated
        delete_pools:
          - pool3

  - test:
      name: client pg access
      module: test_client_pg_access.py
      polarion-id: CEPH-83571713
      config:
        verify_client_pg_access:
          num_snapshots: 20
          configurations:
            pool-1:
              pool_name: ec_pool_4
              pool_type: erasure
              pg_num: 1
              k: 8
              m: 3
              disable_pg_autoscale: true
            pool-2:
              pool_type: replicated
              pool_name: re_pool_4
              pg_num: 1
              disable_pg_autoscale: true
      desc: many clients clients accessing same PG with bluestore as backend
