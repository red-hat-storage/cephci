# Suite contains basic Tier-2,Tier-3 and Tier-4 rados tests
#===============================================================================================
#------------------------------------------------------------------------------------------
#----- Tier-2, Tier-3 and Tier-4 tests to verify the trim,PG and compaction verification ------
#------------------------------------------------------------------------------------------
# Conf: conf/reef/rados/7-node-cluster.yaml
#
#===============================================================================================
tests:
  - test:
      name: setup install pre-requisistes
      desc: Setup phase to deploy the required pre-requisites for running the tests.
      module: install_prereq.py
      abort-on-fail: true

  - test:
      name: cluster deployment
      desc: Execute the cluster deployment workflow.
      module: test_cephadm.py
      polarion-id:
      config:
        verify_cluster_health: true
        steps:
          - config:
              command: bootstrap
              service: cephadm
              base_cmd_args:
                verbose: true
              args:
                registry-url: registry.redhat.io
                mon-ip: node1
                orphan-initial-daemons: true
          - config:
              command: add_hosts
              service: host
              args:
                attach_ip_address: true
                labels: apply-all-labels
          - config:
              command: apply
              service: mgr
              args:
                placement:
                  label: mgr
          - config:
              command: apply
              service: mon
              args:
                placement:
                  label: mon
          - config:
              command: apply
              service: osd
              args:
                all-available-devices: true
          - config:
              command: shell
              args:          # arguments to ceph orch
                - ceph
                - fs
                - volume
                - create
                - cephfs
          - config:
              command: apply
              service: rgw
              pos_args:
                - rgw.1
              args:
                placement:
                  label: rgw
          - config:
              command: apply
              service: mds
              base_cmd_args:          # arguments to ceph orch
                verbose: true
              pos_args:
                - cephfs              # name of the filesystem
              args:
                placement:
                  nodes:
                    - node2
                    - node6
                  limit: 2            # no of daemons
                  sep: " "            # separator to be used for placements
      destroy-cluster: false
      abort-on-fail: true

  - test:
      name: Configure client admin
      desc: Configures client admin node on cluster
      module: test_client.py
      polarion-id:
      config:
        command: add
        id: client.1                      # client Id (<type>.<Id>)
        node: node7                       # client node
        install_packages:
          - ceph-common
        copy_admin_keyring: true          # Copy admin keyring to node
        caps:                             # authorize client capabilities
          mon: "allow *"
          osd: "allow *"
          mds: "allow *"
          mgr: "allow *"

  - test:
      name: Automatic trimming of osdmaps
      desc: check for periodic trimming of osdmaps
      module: test_osdmap_trim.py
      polarion-id: CEPH-10046

  - test:
      name: Trimming of onodes
      desc: check for the onode trimming in the cluster
      module: test_osd_onode_trimming.py
      polarion-id: CEPH-83575269

  - test:
      name: Inconsistent object pg check
      desc: Inconsistent object pg check
      module: test_osd_inconsistency_pg.py
      polarion-id: CEPH-9924
      config:
        verify_osd_omap_entries:
          configurations:
            pool-1:
              pool_name: Inconsistent_pool
              pool_type: replicated
              pg_num: 1
          omap_config:
            obj_start: 0
            obj_end: 5
            num_keys_obj: 10
        delete_pool: true

  - test:
      name: Inconsistent object pg check using pool snapshot for RE pools
      desc: Inconsistent object pg check using pool snapshot for RE pools
      module: test_osd_snap_inconsistency_pg.py
      polarion-id: CEPH-9942
      config:
        verify_osd_omap_entries:
          configurations:
            pool-1:
              pool_name: Inconsistent_snap_pool_re
              pool_type: replicated
              pg_num: 1
          omap_config:
            obj_start: 0
            obj_end: 5
            num_keys_obj: 10
        delete_pool: true

  - test:
      name: Inconsistent object secondary pg check using pool snapshot
      desc: Inconsistent object pg check using pool snapshot for RE pools for secondary OSD in PG
      module: test_osd_snap_inconsistency_pg.py
      polarion-id: CEPH-83571452
      config:
        test_secondary: true
        verify_osd_omap_entries:
          configurations:
            pool-1:
              pool_name: Inconsistent_snap_pool
              pool_type: replicated
              pg_num: 1
          omap_config:
            obj_start: 0
            obj_end: 5
            num_keys_obj: 10
        delete_pool: true

  - test:
      name: OSD compaction with failures
      module: test_osd_compaction.py
      polarion-id: CEPH-11681
      config:
        omap_config:
          pool_name: re_pool_large_omap
          large_warn: true
          obj_start: 0
          obj_end: 5
          normal_objs: 400
          num_keys_obj: 200001
        bench_config:
          pool_name: re_pool_bench
          pg_num: 128
          pgp_num: 128
      desc: Perform OSD compaction with & without failures
